{"version":3,"file":"static/js/284.db987574.chunk.js","mappings":"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","sources":["components/admin/products/CreateProduct.js","components/utils/MediaUpload.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport styled from \"styled-components\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MediaUpload from \"../../utils/MediaUpload\";\r\n\r\nconst CreateProduct = () => {\r\n  const [btnDissable, setBtnDissable] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      price: \"\",\r\n      description: \"\",\r\n      category: \"\",\r\n      brand: \"\",\r\n      stock: \"\",\r\n    },\r\n    validationSchema: yup.object({\r\n      name: yup\r\n        .string()\r\n        .min(3, \"Product name must have at least 3 characters.\")\r\n        .required(\"Product name is required.\"),\r\n      price: yup.number().max(8).required(\"Price is required\"),\r\n      description: yup\r\n        .string()\r\n        .min(100, \"Product description must have at least 100 characters.\")\r\n        .required(\"Product description is required.\"),\r\n      category: yup\r\n        .string()\r\n        .min(3, \"Category name must have at least 3 characters.\")\r\n        .required(\"Category is required.\"),\r\n      brand: yup.string(),\r\n      stock: yup.number().min(1).required(\"Stock  is required.\"),\r\n    }),\r\n    onSubmit: (values, { resetForm }) => {},\r\n  });\r\n\r\n  //   const formik = useFormik({\r\n  //     initialValues: {\r\n  //       name: \"\",\r\n  //       price: \"\",\r\n  //       description: \"\",\r\n  //       category: \"\",\r\n  //       brand: \"\",\r\n  //       stock: \"\",\r\n  //     },\r\n\r\n  //     validationSchema: yup.object({\r\n  //       name: yup\r\n  //         .string()\r\n  //         .min(3, \"Product name must have at least 3 characters.\")\r\n  //         .required(\"Product name is required.\"),\r\n  //       price: yup.number().max(8).required(\"Price is required\"),\r\n  //       description: yup\r\n  //         .string()\r\n  //         .min(100, \"Product description must have at least 100 characters.\")\r\n  //         .required(\"Product description is required.\"),\r\n  //       category: yup\r\n  //         .string()\r\n  //         .min(3, \"Category name must have at least 3 characters.\")\r\n  //         .required(\"Category is required.\"),\r\n  //       brand: yup.string(),\r\n  //       stock: yup.number().min(1).required(\"Stock  is required.\"),\r\n  //     }),\r\n  //     onSubmit: (values, { resetForm }) => {\r\n  //     //   setBtnDissable(true);\r\n  //     //   const { name, email, mobile, birthday, gender } = values;\r\n  //     //   console.log(values);\r\n\r\n  //     //   function updateProfile(mediaUrls = []) {\r\n  //     //     const avatar = {\r\n  //     //       public_id: mediaUrls[0]?.public_id\r\n  //     //         ? mediaUrls[0]?.public_id\r\n  //     //         : user.avatar.public_id,\r\n  //     //       url: mediaUrls[0]?.secure_url\r\n  //     //         ? mediaUrls[0]?.secure_url\r\n  //     //         : user.avatar.url,\r\n  //     //     };\r\n\r\n  //     //     axios\r\n  //     //       .put(`/api/v1/profile/update`, {\r\n  //     //         name,\r\n  //     //         email,\r\n  //     //         avatar,\r\n  //     //         mobile,\r\n  //     //         birthday,\r\n  //     //         gender,\r\n  //     //       })\r\n  //     //       .then((res) => {\r\n  //     //         if (res.status === 200 && res.data.success) {\r\n  //     //           toast(\"Profile update Sucessfull\");\r\n  //     //           setTimeout(() => {\r\n  //     //             navigate(\"/account/myprofile\");\r\n  //     //           }, 3000);\r\n  //     //         } else {\r\n  //     //           toast(res.data.message);\r\n  //     //         }\r\n  //     //       })\r\n  //     //       .catch((err) => {\r\n  //     //         console.log(err.message);\r\n  //     //       });\r\n  //     //   }\r\n\r\n  //     //   if (profilePic) {\r\n  //     //     MediaUpload(profilePic).then((res) => {\r\n  //     //       updateProfile(res);\r\n  //     //     });\r\n  //     //   } else {\r\n  //     //     updateProfile();\r\n  //     //   }\r\n  //     // },\r\n  //   });\r\n\r\n  return (\r\n    <UpdateProfileContainer>\r\n      <Title>\r\n        <h2>Update Profile</h2>\r\n      </Title>\r\n      <Content>\r\n        {/* <UserImage onClick={() => setIsProfile(true)}>\r\n          {\r\n            <>\r\n              <img src={user?.avatar?.url} alt=\"profile_picture\" />\r\n              {isProfile && (\r\n                <div>\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"profilePic\"\r\n                    onChange={(e) => setProfilePic(e.target.files[0])}\r\n                  />\r\n                  {formik.touched.profilePic && formik.errors.profilePic && (\r\n                    <p>\r\n                      <span>i</span> {formik.errors.profilePic}{\" \"}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </>\r\n          }\r\n        </UserImage> */}\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <InputGroup>\r\n            <div>\r\n              <label htmlFor=\"name\"> Product Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.name}\r\n              />\r\n              {formik.touched.name && formik.errors.name && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.name}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"price\">Price</label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"price\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.price}\r\n              />\r\n              {formik.touched.price && formik.errors.price && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.price}\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.description}\r\n              />\r\n              {formik.touched.description && formik.errors.description && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.description}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"category\">Category</label>\r\n\r\n              <input\r\n                type=\"text\"\r\n                name=\"category\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.category}\r\n              />\r\n              {formik.touched.category && formik.errors.category && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.category}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"brand\">Brand</label>\r\n\r\n              <input\r\n                type=\"text\"\r\n                name=\"brand\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.brand}\r\n              />\r\n              {formik.touched.brand && formik.errors.brand && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.brand}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"stock\">Stock</label>\r\n\r\n              <input\r\n                type=\"number\"\r\n                name=\"stock\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.stock}\r\n              />\r\n              {formik.touched.stock && formik.errors.stock && (\r\n                <p>\r\n                  <span>i</span> {formik.errors.stock}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </InputGroup>\r\n          <Button>\r\n            <input\r\n              onClick={formik.handleSubmit}\r\n              type=\"submit\"\r\n              value=\"Update Profile\"\r\n              disabled={btnDissable}\r\n            />\r\n          </Button>\r\n        </Form>\r\n      </Content>\r\n    </UpdateProfileContainer>\r\n  );\r\n};\r\n\r\nexport default CreateProduct;\r\n\r\nconst UpdateProfileContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  border-radius: 0.5rem;\r\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\r\n  padding: 5rem;\r\n  margin: 2rem;\r\n  width: 90%;\r\n  @media screen and (max-width: 768px) {\r\n    margin: 0 5rem;\r\n  }\r\n  @media screen and (max-width: 450px) {\r\n    padding: 2rem;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  margin-top: 2rem;\r\n\r\n  width: 90%;\r\n\r\n  h2 {\r\n    text-align: left;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    h2 {\r\n      text-align: center;\r\n    }\r\n  }\r\n`;\r\nconst UserImage = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  margin-bottom: 2rem;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  img {\r\n    width: 15rem;\r\n    height: 15rem;\r\n    border-radius: 50%;\r\n    object-fit: cover;\r\n  }\r\n`;\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst InputGroup = styled.div`\r\n  div {\r\n    margin: 1rem 0;\r\n    & label {\r\n      font-size: 1.3rem;\r\n      color: var(--text-secondary);\r\n    }\r\n    & input {\r\n      width: 100%;\r\n      height: 3.5rem;\r\n      padding: 0 1rem;\r\n      border: none;\r\n      outline: none;\r\n      &:focus {\r\n        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n          rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n      }\r\n      &::placeholder {\r\n        padding-left: 0.5rem;\r\n        font-size: 1.3rem;\r\n      }\r\n    }\r\n    p {\r\n      font-size: 1.1rem;\r\n      span {\r\n        font-style: italic;\r\n        color: tomato;\r\n        margin: 1.3rem 0.4rem 0 0;\r\n        font-weight: 700;\r\n        font-size: 1.3rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Button = styled.div`\r\n  & input {\r\n    font-size: 1.3rem;\r\n    border: none;\r\n    background-color: var(--bg-primary);\r\n    padding: 1rem 2rem;\r\n    border-radius: 5px;\r\n    margin-bottom: 1rem;\r\n    cursor: pointer;\r\n    transition: all 0.5s;\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: #ff6347f6;\r\n    }\r\n  }\r\n`;\r\n","import axios from \"axios\";\r\n\r\nconst MediaUpload = (file) => {\r\n  // Upload image on Cloudinary\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (res) => {\r\n      const public_id = file.name.split(\".\")[0];\r\n\r\n      axios\r\n        .post(\"/api/v1/media/uploadImage\", {\r\n          images: [\r\n            {\r\n              base64: res.target.result,\r\n              options: {\r\n                public_id: public_id,\r\n                tags: [public_id],\r\n              },\r\n            },\r\n          ],\r\n        })\r\n        .then((res) => {\r\n          resolve(res.data.urls);\r\n        })\r\n        .catch((err) => {\r\n          reject(err.message);\r\n        });\r\n    };\r\n  });\r\n};\r\n\r\nexport default MediaUpload;\r\n"],"names":["useState","btnDissable","formik","useNavigate","useFormik","initialValues","name","price","description","category","brand","stock","validationSchema","yup","min","required","max","onSubmit","values","resetForm","UpdateProfileContainer","Title","Content","Form","handleSubmit","InputGroup","htmlFor","type","onChange","handleChange","value","touched","errors","Button","onClick","disabled","styled","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","res","public_id","split","axios","images","base64","target","result","options","tags","then","data","urls","catch","err","message"],"sourceRoot":""}