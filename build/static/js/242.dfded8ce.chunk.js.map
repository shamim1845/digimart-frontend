{"version":3,"file":"static/js/242.dfded8ce.chunk.js","mappings":"qQAyFA,UAhFsB,WACpB,IAQIA,EAAMC,EARV,GAAwBC,EAAAA,EAAAA,UAAS,CAC/BC,SAAU,GACVC,gBAAiB,KAFnB,eAAOC,EAAP,KAAaC,EAAb,KAKMC,GAAWC,EAAAA,EAAAA,MAIXC,EAAe,SAACC,GACpBV,EAAOU,EAAEC,OAAOX,KACjBC,EAAQS,EAAEC,OAAOV,MACjBK,GAAQ,kBAAID,GAAL,cAAYL,EAAOC,MAGvBW,GAASC,EAAAA,EAAAA,MACPC,EAAa,mCAAG,WAAMJ,GAAN,8EACpBK,QAAQC,IAAIJ,EAAOK,OACnBP,EAAEQ,iBAFkB,SAIVf,EAA6BE,EAA7BF,SAAUC,EAAmBC,EAAnBD,gBACfD,IAAaC,EALE,iBAMhBe,EAAAA,EAAAA,IAAM,2BANU,wCAQEC,IAAAA,IAAA,iCAAoCR,EAAOK,OAAS,CAACd,SAAAA,EAAUC,gBAAAA,IARjE,QAQViB,EARU,OAShBN,QAAQC,IAAIK,GACE,MAAfA,EAAIC,SACLH,EAAAA,EAAAA,IAAM,gCACNI,aAAaC,QAAQ,gBAAiBC,KAAKC,UAAUL,EAAIhB,KAAKY,QAE1DU,YAAW,WACTpB,EAAS,OACR,OAEHY,EAAAA,EAAAA,IAAM,kCAlBQ,0DAuBlBJ,QAAQC,IAAR,OACAG,EAAAA,EAAAA,IAAM,kCAxBY,0DAAH,sDA6BnB,OACE,iCACA,SAAC,KAAD,KACE,SAACS,EAAD,WACE,SAACC,EAAD,WACE,UAACC,EAAD,YACE,SAACC,EAAD,gCACA,UAACC,EAAD,CAAMC,SAAUnB,EAAhB,WACE,UAACoB,EAAD,YAEE,4BACE,kBAAOC,QAAQ,WAAf,2BACA,kBAAOC,KAAK,WAAWpC,KAAK,WAAWqC,SAAU5B,EAAcR,MAAOI,EAAKF,eAG7E,4BACE,kBAAOgC,QAAQ,kBAAf,mCACA,kBAAOC,KAAK,WAAWpC,KAAK,kBAAkBqC,SAAU5B,EAAcR,MAAOI,EAAKD,yBAGtF,SAACkC,EAAD,WACE,kBAAOF,KAAK,SAASnC,MAAM,2BAe3C,IAAM2B,EAAiBW,EAAAA,GAAAA,IAAH,mHAMdV,EAAeU,EAAAA,GAAAA,IAAH,8JASZT,EAAgBS,EAAAA,GAAAA,IAAH,kNASbR,EAAQQ,EAAAA,GAAAA,GAAH,mEAKLP,EAAOO,EAAAA,GAAAA,KAAH,yDAIJL,EAAaK,EAAAA,GAAAA,IAAH,gbAoBVD,EAASC,EAAAA,GAAAA,IAAH","sources":["components/Auth/ResetPassword.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport axiox from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\"\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\n\r\nconst ResetPassword = () => {\r\n  const [data, setData] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  })\r\n\r\n  const navigate = useNavigate();\r\n\r\n  \r\n  let name, value;\r\n  const InputHandler = (e) => {\r\n    name = e.target.name;\r\n   value = e.target.value;\r\n   setData({...data, [name]: value})\r\n  }\r\n\r\n  let params = useParams();\r\n  const SubmitHandler = async(e) => {\r\n    console.log(params.token);\r\n    e.preventDefault();\r\n    try{\r\n      const { password, confirmPassword} = data;\r\n      if(password !== confirmPassword) {\r\n        toast(\"Password doesn't match.\");\r\n      }else{\r\n        const res = await axiox.put(`/api/v1/password/reset/${params.token}`, {password, confirmPassword});\r\n        console.log(res);\r\n    if(res.status === 200) {\r\n      toast(\"Password Update successfull.\")\r\n      localStorage.setItem(\"digimartToken\", JSON.stringify(res.data.token))\r\n      \r\n          setTimeout(() => {\r\n            navigate(\"/\")\r\n          }, 3000);\r\n        }else{\r\n          toast(\"Invalid Password Reset Details\")\r\n        }\r\n      \r\n      }\r\n    }catch(err) {\r\n      console.log(err);\r\n      toast(\"Invalid Password Reset Details\")\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer />\r\n      <LoginContainer>\r\n        <ContainerTop>\r\n          <FormContainer>\r\n            <Title> Reset Password </Title>\r\n            <Form onSubmit={SubmitHandler}>\r\n              <InputGroup>\r\n            \r\n                <div>\r\n                  <label htmlFor=\"password\">New Password</label>\r\n                  <input type=\"password\" name=\"password\" onChange={InputHandler} value={data.password}/>\r\n                </div>\r\n            \r\n                <div>\r\n                  <label htmlFor=\"confirmPassword\">Confirm New Password</label>\r\n                  <input type=\"password\" name=\"confirmPassword\" onChange={InputHandler} value={data.confirmPassword}/>\r\n                </div>\r\n              </InputGroup>\r\n              <Button>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n              </Button>\r\n            </Form>\r\n       \r\n          </FormContainer>\r\n\r\n        </ContainerTop>\r\n\r\n      </LoginContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n\r\nconst LoginContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 80vh;\r\n`;\r\nconst ContainerTop = styled.div`\r\n  width: 100%;\r\n  max-width: 35rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 2rem;\r\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n  border-radius: 5px;\r\n`;\r\nconst Title = styled.h2`\r\n  font-size: 2.5rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst InputGroup = styled.div`\r\n  div {\r\n    margin: 1rem 0;\r\n    & label {\r\n      font-size: 1.3rem;\r\n      color: var(--text-secondary);\r\n    }\r\n    & input {\r\n      width: 100%;\r\n      height: 3rem;\r\n      &:focus {\r\n        border: none;\r\n        outline: none;\r\n        /* outline: 1px solid tomato; */\r\n        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n          rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Button = styled.div`\r\n  & input {\r\n    font-size: 1.3rem;\r\n    border: none;\r\n    background-color: var(--bg-primary);\r\n    padding: 1rem 2rem;\r\n    border-radius: 5px;\r\n    margin-bottom: 1rem;\r\n    cursor: pointer;\r\n    transition: all 0.5s;\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: #ff6347f6;\r\n    }\r\n  }\r\n`;\r\n"],"names":["name","value","useState","password","confirmPassword","data","setData","navigate","useNavigate","InputHandler","e","target","params","useParams","SubmitHandler","console","log","token","preventDefault","toast","axiox","res","status","localStorage","setItem","JSON","stringify","setTimeout","LoginContainer","ContainerTop","FormContainer","Title","Form","onSubmit","InputGroup","htmlFor","type","onChange","Button","styled"],"sourceRoot":""}